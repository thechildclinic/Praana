import React from 'react';
import { useVoice } from '../VoiceContext';

interface VoiceCommandFallbackProps {
  onCommand: (command: string) => void;
  availableCommands?: string[];
  isVisible?: boolean;
  context?: 'practice' | 'general' | 'navigation';
}

const VoiceCommandFallback: React.FC<VoiceCommandFallbackProps> = ({
  onCommand,
  availableCommands,
  isVisible = true,
  context = 'general'
}) => {
  const { isSupported, permissionStatus, isListening, currentLanguage } = useVoice();

  // Don't show if voice is working properly
  if (isSupported && permissionStatus === 'granted' && !isVisible) {
    return null;
  }

  // Define command buttons based on context and language
  const getCommandButtons = () => {
    const isHindi = currentLanguage.code.startsWith('hi');
    const isTamil = currentLanguage.code.startsWith('ta');
    const isTelugu = currentLanguage.code.startsWith('te');
    const isBengali = currentLanguage.code.startsWith('bn');
    const isSpanish = currentLanguage.code.startsWith('es');

    const baseCommands = [
      {
        command: 'pause',
        label: isHindi ? 'рд░реЛрдХреЗрдВ' : isTamil ? 'роиро┐ро▒рпБродрпНродрпБ' : isTelugu ? 'р░кр░╛р░Ьр▒Н' : isBengali ? 'ржмрж┐рж░рждрж┐' : isSpanish ? 'Pausar' : 'Pause',
        icon: 'тП╕я╕П',
        color: 'bg-yellow-500 hover:bg-yellow-600'
      },
      {
        command: 'resume',
        label: isHindi ? 'рдЬрд╛рд░реА рд░рдЦреЗрдВ' : isTamil ? 'родрпКроЯро░рпН' : isTelugu ? 'р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър▒Б' : isBengali ? 'ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржи' : isSpanish ? 'Continuar' : 'Resume',
        icon: 'тЦ╢я╕П',
        color: 'bg-green-500 hover:bg-green-600'
      },
      {
        command: 'stop',
        label: isHindi ? 'рдмрдВрдж рдХрд░реЗрдВ' : isTamil ? 'роиро┐ро▒рпБродрпНродрпБ' : isTelugu ? 'р░Жр░кр▒Б' : isBengali ? 'ржмржирзНржз ржХрж░рзБржи' : isSpanish ? 'Parar' : 'Stop',
        icon: 'тП╣я╕П',
        color: 'bg-red-500 hover:bg-red-600'
      }
    ];

    const practiceCommands = [
      {
        command: 'next',
        label: isHindi ? 'рдЕрдЧрд▓рд╛' : isTamil ? 'роЕроЯрпБродрпНродрпБ' : isTelugu ? 'р░др░жр▒Бр░кр░░р░┐' : isBengali ? 'ржкрж░ржмрж░рзНрждрзА' : isSpanish ? 'Siguiente' : 'Next',
        icon: 'тПня╕П',
        color: 'bg-blue-500 hover:bg-blue-600'
      },
      {
        command: 'explain',
        label: isHindi ? 'рд╕рдордЭрд╛рдПрдВ' : isTamil ? 'ро╡ро┐ро│роХрпНроХрпБ' : isTelugu ? 'р░╡р░┐р░╡р░░р░┐р░Вр░Ър▒Б' : isBengali ? 'ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи' : isSpanish ? 'Explicar' : 'Explain',
        icon: 'ЁЯТб',
        color: 'bg-purple-500 hover:bg-purple-600'
      },
      {
        command: 'help',
        label: isHindi ? 'рдорджрдж' : isTamil ? 'роЙродро╡ро┐' : isTelugu ? 'р░╕р░╣р░╛р░пр░В' : isBengali ? 'рж╕рж╛рж╣рж╛ржпрзНржп' : isSpanish ? 'Ayuda' : 'Help',
        icon: 'тЭУ',
        color: 'bg-orange-500 hover:bg-orange-600'
      }
    ];

    const speedCommands = [
      {
        command: 'slower',
        label: isHindi ? 'рдзреАрдорд╛' : isTamil ? 'роорпЖродрпБро╡ро╛роХ' : isTelugu ? 'р░ир▒Жр░ор▒Нр░ор░жр░┐р░Чр░╛' : isBengali ? 'ржзрзАрж░рзЗ' : isSpanish ? 'M├бs lento' : 'Slower',
        icon: 'ЁЯРМ',
        color: 'bg-indigo-500 hover:bg-indigo-600'
      },
      {
        command: 'faster',
        label: isHindi ? 'рддреЗрдЬрд╝' : isTamil ? 'ро╡рпЗроХрооро╛роХ' : isTelugu ? 'р░╡р▒Зр░Чр░Вр░Чр░╛' : isBengali ? 'ржжрзНрж░рзБржд' : isSpanish ? 'M├бs r├бpido' : 'Faster',
        icon: 'ЁЯР░',
        color: 'bg-pink-500 hover:bg-pink-600'
      }
    ];

    switch (context) {
      case 'practice':
        return [...baseCommands, ...practiceCommands, ...speedCommands];
      case 'navigation':
        return baseCommands.slice(0, 2); // Just pause/resume for navigation
      default:
        return baseCommands;
    }
  };

  const commandButtons = getCommandButtons();
  const filteredCommands = availableCommands 
    ? commandButtons.filter(btn => availableCommands.includes(btn.command))
    : commandButtons;

  const handleCommandClick = (command: string) => {
    onCommand(command);
  };

  const getStatusMessage = () => {
    if (!isSupported) {
      return currentLanguage.code.startsWith('hi') 
        ? 'рдЖрд╡рд╛рдЬрд╝ рд╕рдорд░реНрдерд┐рдд рдирд╣реАрдВ рд╣реИ - рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ'
        : currentLanguage.code.startsWith('ta')
        ? 'роХрпБро░ро▓рпН роЖродро░ро╡рпБ роЗро▓рпНро▓рпИ - рокрпКродрпНродро╛ройрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН'
        : currentLanguage.code.startsWith('es')
        ? 'Voz no compatible - usar botones'
        : 'Voice not supported - use buttons';
    }
    if (permissionStatus === 'denied') {
      return currentLanguage.code.startsWith('hi')
        ? 'рдорд╛рдЗрдХреНрд░реЛрдлрд╝реЛрди рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ - рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ'
        : currentLanguage.code.startsWith('ta')
        ? 'роорпИроХрпНро░рпЛроГрокрпЛройрпН роЕройрпБроородро┐ роЗро▓рпНро▓рпИ - рокрпКродрпНродро╛ройрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН'
        : currentLanguage.code.startsWith('es')
        ? 'Micr├│fono denegado - usar botones'
        : 'Microphone denied - use buttons';
    }
    if (isListening) {
      return currentLanguage.code.startsWith('hi')
        ? 'рд╕реБрди рд░рд╣рд╛ рд╣реИ... рдпрд╛ рдмрдЯрди рджрдмрд╛рдПрдВ'
        : currentLanguage.code.startsWith('ta')
        ? 'роХрпЗроЯрпНроХро┐ро▒родрпБ... роЕро▓рпНро▓родрпБ рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро╡рпБроорпН'
        : currentLanguage.code.startsWith('es')
        ? 'Escuchando... o presiona bot├│n'
        : 'Listening... or press button';
    }
    return currentLanguage.code.startsWith('hi')
      ? 'рдЖрд╕рд╛рди рдирд┐рдпрдВрддреНрд░рдг рдХреЗ рд▓рд┐рдП рдмрдЯрди рджрдмрд╛рдПрдВ'
      : currentLanguage.code.startsWith('ta')
      ? 'роОро│ро┐роп роХроЯрпНроЯрпБрокрпНрокро╛роЯрпНроЯро┐ро▒рпНроХрпБ рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро╡рпБроорпН'
      : currentLanguage.code.startsWith('es')
      ? 'Presiona botones para control f├бcil'
      : 'Press buttons for easy control';
  };

  return (
    <div className="bg-white/90 backdrop-blur-sm rounded-lg p-4 shadow-lg border border-gray-200">
      {/* Status Message */}
      <div className="text-center mb-3">
        <p className="text-sm text-gray-600 font-medium">
          {getStatusMessage()}
        </p>
      </div>

      {/* Command Buttons */}
      <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
        {filteredCommands.map((cmd) => (
          <button
            key={cmd.command}
            onClick={() => handleCommandClick(cmd.command)}
            className={`${cmd.color} text-white px-3 py-2 rounded-lg font-medium text-sm transition-colors duration-200 flex items-center justify-center space-x-2 min-h-[44px]`}
            aria-label={`${cmd.label} command`}
          >
            <span className="text-lg">{cmd.icon}</span>
            <span className="truncate">{cmd.label}</span>
          </button>
        ))}
      </div>

      {/* Voice Status Indicator */}
      {isSupported && permissionStatus === 'granted' && (
        <div className="mt-3 flex items-center justify-center space-x-2">
          <div className={`w-2 h-2 rounded-full ${isListening ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}></div>
          <span className="text-xs text-gray-500">
            {isListening 
              ? (currentLanguage.code.startsWith('hi') ? 'рдЖрд╡рд╛рдЬрд╝ рд╕рдХреНрд░рд┐рдп' : 'Voice Active')
              : (currentLanguage.code.startsWith('hi') ? 'рдЖрд╡рд╛рдЬрд╝ рдирд┐рд╖реНрдХреНрд░рд┐рдп' : 'Voice Inactive')
            }
          </span>
        </div>
      )}
    </div>
  );
};

export default VoiceCommandFallback;
